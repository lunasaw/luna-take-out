<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.github.lunasaw</groupId>
    <artifactId>luna-take-out</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>take-out-web</module>
        <module>take-out-admin</module>
    </modules>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.2.RELEASE</version>
        <relativePath/>
        <!-- lookup parent from repository -->
    </parent>
    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <docker.host>https://106.14.30.12:2375</docker.host>
        <docker.maven.plugin.version>1.2.2</docker.maven.plugin.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter -->
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>2.1.1</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                </plugin>
                <!--使用docker-maven-plugin插件 -->
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>${docker.maven.plugin.version}</version>
                    <!--将插件绑定在某个phase执行 -->
                    <executions>
                        <execution>
                            <id>build-image</id>
                            <!--将插件绑定在package这个phase上。也就是说，用户只需执行mvn package ，就会自动执行mvn docker:build -->
                            <phase>package</phase>
                            <goals>
                                <goal>build</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <forceTags>true</forceTags>
                        <!--指定生成的镜像名 该处修改为自己想要生成的镜像名称-->
                        <imageName>luna-post</imageName>
                        <!--指定标签 -->
                        <imageTags>
                            <imageTag>latest</imageTag>
                        </imageTags>
                        <!-- 指定 Dockerfile 路径 -->
                        <dockerDirectory>${project.basedir}/docker</dockerDirectory>
                        <!--指定远程 docker api地址 -->
                        <dockerHost>${docker.host}</dockerHost>
                        <!--指定pem证书文件路径地址 -->
                        <dockerCertPath>/Users/luna/Documents/luna-linux-conf/certs</dockerCertPath>
                        <!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
                        <resources>
                            <resource>
                                <targetPath>/</targetPath>
                                <!--jar 包所在的路径  此处配置的 即对应 target 目录 -->
                                <directory>${project.build.directory}</directory>
                                <!-- 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名 -->
                                <include>${project.build.finalName}.jar</include>
                            </resource>
                        </resources>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>